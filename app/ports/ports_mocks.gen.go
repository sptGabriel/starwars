// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ports

import (
	"context"
	"sync"
)

// Ensure, that StarWarsServiceMock does implement StarWarsService.
// If this is not the case, regenerate this file with moq.
var _ StarWarsService = &StarWarsServiceMock{}

// StarWarsServiceMock is a mock implementation of StarWarsService.
//
// 	func TestSomethingThatUsesStarWarsService(t *testing.T) {
//
// 		// make and configure a mocked StarWarsService
// 		mockedStarWarsService := &StarWarsServiceMock{
// 			PlanetsAppearancesInFilmsFunc: func(ctx context.Context, planetName string) (int, error) {
// 				panic("mock out the PlanetsAppearancesInFilms method")
// 			},
// 		}
//
// 		// use mockedStarWarsService in code that requires StarWarsService
// 		// and then make assertions.
//
// 	}
type StarWarsServiceMock struct {
	// PlanetsAppearancesInFilmsFunc mocks the PlanetsAppearancesInFilms method.
	PlanetsAppearancesInFilmsFunc func(ctx context.Context, planetName string) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// PlanetsAppearancesInFilms holds details about calls to the PlanetsAppearancesInFilms method.
		PlanetsAppearancesInFilms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PlanetName is the planetName argument value.
			PlanetName string
		}
	}
	lockPlanetsAppearancesInFilms sync.RWMutex
}

// PlanetsAppearancesInFilms calls PlanetsAppearancesInFilmsFunc.
func (mock *StarWarsServiceMock) PlanetsAppearancesInFilms(ctx context.Context, planetName string) (int, error) {
	if mock.PlanetsAppearancesInFilmsFunc == nil {
		panic("StarWarsServiceMock.PlanetsAppearancesInFilmsFunc: method is nil but StarWarsService.PlanetsAppearancesInFilms was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		PlanetName string
	}{
		Ctx:        ctx,
		PlanetName: planetName,
	}
	mock.lockPlanetsAppearancesInFilms.Lock()
	mock.calls.PlanetsAppearancesInFilms = append(mock.calls.PlanetsAppearancesInFilms, callInfo)
	mock.lockPlanetsAppearancesInFilms.Unlock()
	return mock.PlanetsAppearancesInFilmsFunc(ctx, planetName)
}

// PlanetsAppearancesInFilmsCalls gets all the calls that were made to PlanetsAppearancesInFilms.
// Check the length with:
//     len(mockedStarWarsService.PlanetsAppearancesInFilmsCalls())
func (mock *StarWarsServiceMock) PlanetsAppearancesInFilmsCalls() []struct {
	Ctx        context.Context
	PlanetName string
} {
	var calls []struct {
		Ctx        context.Context
		PlanetName string
	}
	mock.lockPlanetsAppearancesInFilms.RLock()
	calls = mock.calls.PlanetsAppearancesInFilms
	mock.lockPlanetsAppearancesInFilms.RUnlock()
	return calls
}
